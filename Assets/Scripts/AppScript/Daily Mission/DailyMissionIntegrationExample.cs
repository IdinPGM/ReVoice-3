using UnityEngine;

public class DailyMissionIntegrationExample : MonoBehaviour
{
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Daily Mission

    private void Start()
    {
        // Subscribe to mission events
        DailyMissionManager.OnMissionCompleted += OnMissionCompleted;
        DailyMissionManager.OnMissionClaimed += OnMissionClaimed;
        DailyMissionManager.OnPointsEarned += OnPointsEarned;
    }

    private void OnDestroy()
    {
        // Unsubscribe from events
        DailyMissionManager.OnMissionCompleted -= OnMissionCompleted;
        DailyMissionManager.OnMissionClaimed -= OnMissionClaimed;
        DailyMissionManager.OnPointsEarned -= OnPointsEarned;
    }

    // ===== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ =====

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ä‡πâ Facial Detection
    public void OnFacialDetectionUsed()
    {
        DailyMissionEvents.TriggerFacialDetection();
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡πà‡∏ô Minigame ‡πÄ‡∏™‡∏£‡πá‡∏à
    public void OnMinigameFinished()
    {
        DailyMissionEvents.TriggerMinigameCompleted();
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πâ‡∏° Productivity
    public void OnProductivityScored(int points)
    {
        DailyMissionEvents.TriggerProductivityPoints(points);
    }

    // ===== Event Handlers =====

    private void OnMissionCompleted(DailyMissionData mission)
    {
        Debug.Log($"üéâ Mission Completed: {mission.questType}");
        
        // ‡πÅ‡∏™‡∏î‡∏á UI notification
        ShowMissionCompletedNotification(mission);
        
        // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
        // AudioManager.Instance.PlaySFX("mission_completed");
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏≤‡∏£‡πå‡∏ó‡∏¥‡πÄ‡∏Ñ‡∏¥‡∏•
        // ParticleManager.Instance.PlayEffect("star_burst");
    }

    private void OnMissionClaimed(DailyMissionData mission)
    {
        Debug.Log($"üí∞ Mission Claimed: {mission.questType}, Points: {mission.points}");
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        // PlayerManager.Instance.AddPoints(mission.points);
        
        // ‡πÅ‡∏™‡∏î‡∏á UI ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
        ShowRewardUI(mission.points);
    }

    private void OnPointsEarned(int points)
    {
        Debug.Log($"‚≠ê Points Earned: {points}");
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
        // UIManager.Instance.UpdateTotalPoints();
    }

    // ===== UI Methods =====

    private void ShowMissionCompletedNotification(DailyMissionData mission)
    {
        // ‡πÅ‡∏™‡∏î‡∏á popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        // NotificationManager.Instance.ShowNotification(
        //     "Mission Completed!", 
        //     $"You have completed {mission.questType}!"
        // );
    }

    private void ShowRewardUI(int points)
    {
        // ‡πÅ‡∏™‡∏î‡∏á UI ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        // RewardUI.Instance.ShowReward(points);
    }

    // ===== Testing Methods (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö) =====

    [ContextMenu("Test Facial Detection")]
    public void TestFacialDetection()
    {
        OnFacialDetectionUsed();
    }

    [ContextMenu("Test Minigame")]
    public void TestMinigame()
    {
        OnMinigameFinished();
    }

    [ContextMenu("Test Productivity")]
    public void TestProductivity()
    {
        OnProductivityScored(5);
    }

    [ContextMenu("Load Sample Missions")]
    public void LoadSampleMissions()
    {
        DailyMissionAPI api = FindObjectOfType<DailyMissionAPI>();
        if (api != null)
        {
            api.TestWithSampleData();
        }
    }
}
